from telethon import TelegramClient, events
import sqlite3
import time
import random

# üîπ –£–∫–∞–∂–∏ —Å–≤–æ–∏ API_ID –∏ API_HASH
API_ID = 123456
API_HASH = "your_api_hash"

# üîπ –£–∫–∞–∂–∏ —Å–≤–æ–π Telegram ID (—á—Ç–æ–±—ã –∫–æ–º–∞–Ω–¥—ã .–¥ –∏ .—Å –º–æ–≥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ç—ã)
# –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤
ADMINS = [1120069212, 1217809305, 7603661633]  # –ó–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–∏ –∞–π–¥–∏

# üîπ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
conn = sqlite3.connect("basketbot.db", check_same_thread=False)
cursor = conn.cursor()

import time

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –±—É—Å—Ç–µ—Ä–∞
def check_booster(user_id):
    cursor.execute("SELECT booster_name, activation_time FROM boosters WHERE user_id = ?", (user_id,))
    booster = cursor.fetchone()

    if not booster:
        return None  # –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –±—É—Å—Ç–µ—Ä–∞

    booster_name, activation_time = booster

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏—Å—Ç–µ–∫–ª–æ –ª–∏ –≤—Ä–µ–º—è –¥–µ–π—Å—Ç–≤–∏—è –±—É—Å—Ç–µ—Ä–∞
    current_time = int(time.time())  # –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
    if activation_time + 3600 <= current_time:  # 3600 —Å–µ–∫—É–Ω–¥ = 1 —á–∞—Å
        # –ë—É—Å—Ç–µ—Ä –∏—Å—Ç–µ–∫, —É–¥–∞–ª—è–µ–º –µ–≥–æ
        cursor.execute("DELETE FROM boosters WHERE user_id = ?", (user_id,))
        conn.commit()
        return None

    return booster_name  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –±—É—Å—Ç–µ—Ä–∞

import sqlite3

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
conn = sqlite3.connect('basketbot.db')
cursor = conn.cursor()

# –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É boosters,

cursor.execute("""
CREATE TABLE IF NOT EXISTS boosters (
    user_id INTEGER,
    booster_name TEXT,
    quantity INTEGER,
    PRIMARY KEY (user_id, booster_name)
)
""")
conn.commit()

# üîπ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
cursor.execute("""CREATE TABLE IF NOT EXISTS users (
    user_id INTEGER PRIMARY KEY, 
    username TEXT, 
    balance INTEGER DEFAULT 1000, 
    last_bonus INTEGER DEFAULT 0,
    started INTEGER DEFAULT 0
)""")
cursor.execute("""CREATE TABLE IF NOT EXISTS boosters (
    user_id INTEGER, 
    booster_name TEXT, 
    quantity INTEGER DEFAULT 0, 
    PRIMARY KEY (user_id, booster_name)
)""")
conn.commit()

# üîπ –ó–∞–ø—É—Å–∫ Telethon-–∫–ª–∏–µ–Ω—Ç–∞
bot = TelegramClient("basketbot", API_ID, API_HASH)

# üîπ –§—É–Ω–∫—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã —Å –±–∞–ª–∞–Ω—Å–æ–º
def get_user(user_id, username=None):
    cursor.execute("SELECT * FROM users WHERE user_id = ?", (user_id,))
    user = cursor.fetchone()
    if not user:
        cursor.execute("INSERT INTO users (user_id, username, balance) VALUES (?, ?, 1000)", (user_id, username))
        conn.commit()
        return (user_id, username, 1000, 0, 0)
    return user

def update_balance(user_id, amount):
    cursor.execute("UPDATE users SET balance = balance + ? WHERE user_id = ?", (amount, user_id))
    conn.commit()

import random

# üèÄ –ë–∞—Å–∫–µ—Ç–±–æ–ª
import random
from telethon import events

@bot.on(events.NewMessage(pattern=r"\.–± (\d+)"))
async def basketball_game(event):
    user_id = event.sender_id
    bet = int(event.pattern_match.group(1))

    cursor.execute("SELECT balance FROM users WHERE user_id = ?", (user_id,))
    user = cursor.fetchone()

    if user is None or user[0] < bet:
        await event.reply("üö´ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª—É–¥–∫–æ–∏–Ω–æ–≤ –¥–ª—è —Å—Ç–∞–≤–∫–∏!")
        return

    await event.reply("üèÄ")  # –û—Ç–ø—Ä–∞–≤–∫–∞ —ç–º–æ–¥–∑–∏ –±–∞—Å–∫–µ—Ç–±–æ–ª–∞

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏—Å—Ö–æ–¥ –∏–≥—Ä—ã
    outcome = random.choices(
        ["lose", "x2", "x3"], 
        weights=[60, 30, 10], 
        k=1
    )[0]

    if outcome == "lose":
        new_balance = user[0] - bet  # –ü—Ä–æ–∏–≥—Ä—ã—à - –ø—Ä–æ—Å—Ç–æ –≤—ã—á–∏—Ç–∞–µ–º —Å—Ç–∞–≤–∫—É
        result_text = random.choice([
            "üíÄ –¢—ã –Ω–µ –ø–æ–ø–∞–ª... –õ—É–¥–∫–æ–∏–Ω—ã —É—Ç–µ–∫–∞—é—Ç —Å–∫–≤–æ–∑—å –ø–∞–ª—å—Ü—ã!",
            "üòî –ù–µ—É–¥–∞—á–∞... –°–µ–≥–æ–¥–Ω—è –±–∞—Å–∫–µ—Ç–±–æ–ª—å–Ω–æ–µ –∫–æ–ª—å—Ü–æ —è–≤–Ω–æ –Ω–µ —Ç–≤–æ–π –¥—Ä—É–≥.",
            "üëé –ü—Ä–æ–º–∞—Ö! –ú–æ–∂–µ—Ç, —Å—Ç–æ–∏—Ç –≤–∑—è—Ç—å –ø–µ—Ä–µ—Ä—ã–≤?"
        ])
        multiplier_text = ""
    else:
        multiplier_value = 2 if outcome == "x2" else 3  # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–Ω–æ–∂–∏—Ç–µ–ª—å
        winnings = bet * multiplier_value  # –í—ã–∏–≥—Ä—ã—à = —Å—Ç–∞–≤–∫–∞ * –º–Ω–æ–∂–∏—Ç–µ–ª—å
        new_balance = user[0] - bet + winnings  # –í—ã—á–∏—Ç–∞–µ–º —Å—Ç–∞–≤–∫—É, –¥–æ–±–∞–≤–ª—è–µ–º –≤—ã–∏–≥—Ä—ã—à

        result_text = random.choice([
            f"üî• –ö—Ä–∞—Å–∞–≤—á–∏–∫! –¢–≤–æ–π –±—Ä–æ—Å–æ–∫ —Ç–æ—á–µ–Ω, –∏ —Ç—ã –∑–∞–±–∏—Ä–∞–µ—à—å {winnings} –ª—É–¥–∫–æ–∏–Ω–æ–≤!",
            f"üèÜ –û—Ç–ª–∏—á–Ω—ã–π –±—Ä–æ—Å–æ–∫! –í–¥–≤–æ–µ –±–æ–ª—å—à–µ –ª—É–¥–∫–æ–∏–Ω–æ–≤ ‚Äî {winnings} —Ç–µ–ø–µ—Ä—å —É —Ç–µ–±—è!",
            f"üéØ –¢–æ—á–Ω–∞—è —Å—Ç—Ä–µ–ª—å–±–∞! –¢—ã –≤—ã–∏–≥—Ä–∞–ª {winnings} –ª—É–¥–∫–æ–∏–Ω–æ–≤!"
        ])
        multiplier_text = f" (x{multiplier_value})"

    # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –∏–≥—Ä–æ–∫–∞
    cursor.execute("UPDATE users SET balance = ? WHERE user_id = ?", (new_balance, user_id))
    conn.commit()

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
    await event.reply(result_text + multiplier_text, reply_to=event.id)

# ‚öΩ –§—É—Ç–±–æ–ª
@bot.on(events.NewMessage(pattern=r"\.—Ñ (\d+)"))
async def football_game(event):
    user_id = event.sender_id
    bet = int(event.pattern_match.group(1))

    cursor.execute("SELECT balance FROM users WHERE user_id = ?", (user_id,))
    user = cursor.fetchone()

    if user is None or user[0] < bet:
        await event.reply("üö´ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª—É–¥–∫–æ–∏–Ω–æ–≤ –¥–ª—è —Å—Ç–∞–≤–∫–∏!")
        return

    await event.reply("‚öΩ")  # –û—Ç–ø—Ä–∞–≤–∫–∞ —ç–º–æ–¥–∑–∏ —Ñ—É—Ç–±–æ–ª–∞

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏—Å—Ö–æ–¥ –∏–≥—Ä—ã
    outcome = random.choices(
        ["lose", "x2", "x3"], 
        weights=[60, 30, 10], 
        k=1
    )[0]

    if outcome == "lose":
        new_balance = user[0] - bet
        result_text = random.choice([
            "üíÄ –¢—ã –ø—Ä–æ–º–∞—Ö–Ω—É–ª—Å—è –ø–æ –≤–æ—Ä–æ—Ç–∞–º... –õ—É–¥–∫–æ–∏–Ω—ã —É—Ç–µ–∫–∞—é—Ç!",
            "üòî –ú–∏–º–æ! –°–µ–≥–æ–¥–Ω—è —è–≤–Ω–æ –Ω–µ —Ç–≤–æ–π –¥–µ–Ω—å.",
            "üëé –í—Ä–∞—Ç–∞—Ä—å –ª–æ–≤–∏—Ç –º—è—á! –¢–≤–æ–π —Å—á–µ—Ç —É–º–µ–Ω—å—à–∞–µ—Ç—Å—è."
        ])
        multiplier_text = ""
    else:
        multiplier_value = 2 if outcome == "x2" else 3
        winnings = bet * multiplier_value
        new_balance = user[0] - bet + winnings

        result_text = random.choice([
            f"üî• –ì–æ–ª! –¢—ã –≤—ã–∏–≥—Ä—ã–≤–∞–µ—à—å {winnings} –ª—É–¥–∫–æ–∏–Ω–æ–≤!",
            f"‚ö° –ú–∞—Å—Ç–µ—Ä—Å–∫–∏–π —É–¥–∞—Ä! –¢–≤–æ–π –ø—Ä–∏–∑ ‚Äî {winnings} –ª—É–¥–∫–æ–∏–Ω–æ–≤!",
            f"ü•Ö –û—Ç–ª–∏—á–Ω—ã–π –≥–æ–ª! –õ—É–¥–∫–æ–∏–Ω—ã —Ç–≤–æ–∏ ‚Äî {winnings}!"
        ])
        multiplier_text = f" (x{multiplier_value})"

    # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –∏–≥—Ä–æ–∫–∞
    cursor.execute("UPDATE users SET balance = ? WHERE user_id = ?", (new_balance, user_id))
    conn.commit()

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
    await event.reply(result_text + multiplier_text, reply_to=event.id)

# üí∞ –ë–∞–ª–∞–Ω—Å
@bot.on(events.NewMessage(pattern=r"\.–±–∞–ª"))
async def check_balance(event):
    user_id = event.sender_id
    user = get_user(user_id)
    await event.reply(f"üí∞ –¢–≤–æ–π –±–∞–ª–∞–Ω—Å: {user[2]} –ª—É–¥–∫–æ–∏–Ω–æ–≤.")

# üéÅ –ë–æ–Ω—É—Å —Ä–∞–∑ –≤ 3 —á–∞—Å–∞
@bot.on(events.NewMessage(pattern=r"\.–±–æ–Ω—É—Å"))
async def get_bonus(event):
    user_id = event.sender_id
    user = get_user(user_id)

    current_time = int(time.time())
    if current_time - user[3] < 10800:
        await event.reply("‚è≥ –¢—ã —É–∂–µ –ø–æ–ª—É—á–∞–ª –±–æ–Ω—É—Å! –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")
        return

    update_balance(user_id, 5000)
    cursor.execute("UPDATE users SET last_bonus = ? WHERE user_id = ?", (current_time, user_id))
    conn.commit()
    await event.reply("üéÅ –¢—ã –ø–æ–ª—É—á–∏–ª 5000 –ª—É–¥–∫–æ–∏–Ω–æ–≤!")

# üîÑ –ü–µ—Ä–µ–¥–∞—á–∞ –º–æ–Ω–µ—Ç
@bot.on(events.NewMessage(pattern=r"\.—Ç (\d+)"))
async def transfer_coins(event):
    user_id = event.sender_id
    user = get_user(user_id)

    if not event.is_reply:
        await event.reply("‚ö†Ô∏è –û—Ç–≤–µ—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞, –∫–æ—Ç–æ—Ä–æ–º—É —Ö–æ—á–µ—à—å –ø–µ—Ä–µ–¥–∞—Ç—å –º–æ–Ω–µ—Ç—ã!")
        return

    reply_msg = await event.get_reply_message()
    target_id = reply_msg.sender_id

    if user_id == target_id:
        await event.reply("üö´ –ù–µ–ª—å–∑—è –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å –º–æ–Ω–µ—Ç—ã —Å–∞–º–æ–º—É —Å–µ–±–µ!")
        return

    amount = int(event.pattern_match.group(1))

    if amount <= 0 or user[2] < amount:
        await event.reply("üí∏ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª—É–¥–∫–æ–∏–Ω–æ–≤!")
        return

    update_balance(user_id, -amount)
    update_balance(target_id, amount)
    
    await event.reply(f"‚úÖ –¢—ã –ø–µ—Ä–µ–¥–∞–ª **{amount}** –ª—É–¥–∫–æ–∏–Ω–æ–≤ –∏–≥—Ä–æ–∫—É {reply_msg.sender.first_name}! üí∞")

# üèÜ –¢–æ–ø-5 –∏–≥—Ä–æ–∫–æ–≤
@bot.on(events.NewMessage(pattern=r"\.—Ç–æ–ø 5"))
async def top_players(event):
    cursor.execute("SELECT username, balance FROM users ORDER BY balance DESC LIMIT 5")
    top_list = cursor.fetchall()

    if not top_list:
        await event.reply("üìâ –¢–æ–ø –ø—É—Å—Ç!")
        return

    msg = "üèÜ **–¢–æ–ø 5 –∏–≥—Ä–æ–∫–æ–≤ –ø–æ –±–∞–ª–∞–Ω—Å—É:**\n"
    for i, (username, balance) in enumerate(top_list, 1):
        msg += f"{i}. @{username} ‚Äî {balance} –ª—É–¥–∫–æ–∏–Ω–æ–≤\n"
    await event.reply(msg)

# üöÄ –°—Ç–∞—Ä—Ç (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π)
@bot.on(events.NewMessage(pattern=r"\.—Å—Ç–∞—Ä—Ç"))
async def start_game(event):
    user_id = event.sender_id
    sender = await event.get_sender()
    username = getattr(sender, "username", None) or f"User#{user_id}"

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∏–≥—Ä–æ–∫ –∞–¥–º–∏–Ω–æ–º
    if user_id in ADMINS:
        admin_tag = "‚ú®üé© **–í—ã ‚Äî –ê–¥–º–∏–Ω!** üé©‚ú®"  # –Ø—Ä–∫–∞—è –º–µ—Ç–∫–∞ –¥–ª—è –∞–¥–º–∏–Ω–∞
        admin_style ="üî• **–ö–æ—Ä–æ–ª—å —ç—Ç–æ–π –∏–≥—Ä—ã!** üî•"
    else:
        admin_tag = ""  # –ï—Å–ª–∏ –Ω–µ –∞–¥–º–∏–Ω, —Ç–æ –ø—É—Å—Ç–æ
        admin_style = "‚ö° –¢—ã –Ω–∞ —Å—Ç–∞—Ä—Ç–µ, –∏–≥—Ä–æ–∫! ‚ö°"  # –î–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å
    cursor.execute("SELECT * FROM users WHERE user_id = ?", (user_id,))
    result = cursor.fetchone()
    if result is None:
        cursor.execute("INSERT INTO users (user_id, balance) VALUES (?, 1000)", (user_id,))
        conn.commit()

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫—Ä–∞—Å–∏–≤—ã–º –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ–º
    await event.reply(f"""
    üéâ **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ë–∞—Å–∫–µ—Ç–ë–æ—Ç!** üèÄ
    {admin_tag}

    {admin_style} 

    üí∞ –ü—Ä–æ–≤–µ—Ä—è–π —Å–≤–æ–π –±–∞–ª–∞–Ω—Å, –µ—Å–ª–∏ —Ç–∞–º —á—Ç–æ-—Ç–æ –∑–∞–≤–∞–ª—è–ª–æ—Å—å ‚Äî –º–æ–∂–µ—à—å —Å—ã–≥—Ä–∞—Ç—å! üëÄ
    ‚ö° –ò—Å–ø–æ–ª—å–∑—É–π .—Ö–µ–ª–ø, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥!

    üí¨ –¢—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—à—å –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∑–∞ –ø–æ–º–æ—â—å—é –∏–ª–∏ —É–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –∫–æ–º–∞–Ω–¥.
    """)


# üìú –•–µ–ª–ø
@bot.on(events.NewMessage(pattern=r"\.—Ö–µ–ª–ø"))
async def help_command(event):
    msg = ("üìú **–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:**\n"
           "üèÄ **.–± [—Å—Ç–∞–≤–∫–∞]** ‚Äî —Å—ã–≥—Ä–∞—Ç—å –≤ –±–∞—Å–∫–µ—Ç–±–æ–ª\n"
           "‚öΩ **.—Ñ [—Å—Ç–∞–≤–∫–∞]** ‚Äî —Å—ã–≥—Ä–∞—Ç—å –≤ —Ñ—É—Ç–±–æ–ª\n"
           "üí∞ **.–±–∞–ª** ‚Äî —É–∑–Ω–∞—Ç—å –±–∞–ª–∞–Ω—Å\n"
           "üéÅ **.–±–æ–Ω—É—Å** ‚Äî –ø–æ–ª—É—á–∏—Ç—å –±–æ–Ω—É—Å (—Ä–∞–∑ –≤ 3 —á–∞—Å–∞)\n"
           "üîÑ **.—Ç [—Å—É–º–º–∞]** ‚Äî –ø–µ—Ä–µ–¥–∞—Ç—å –º–æ–Ω–µ—Ç—ã\n"
           "üèÜ **.—Ç–æ–ø 5** ‚Äî —Ç–æ–ø –∏–≥—Ä–æ–∫–æ–≤\n"
           "üöÄ **.—Å—Ç–∞—Ä—Ç** ‚Äî –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É\n"
"üé∞ **.—Ä [—Å—Ç–∞–≤–∫–∞]** - –æ–ø–∞—Å–Ω–∞—è –∏–≥—Ä–∞ –≤ —Ä—É–ª–µ—Ç–∫—É, –ø–æ–¥—Ä–æ–±–Ω–µ–µ: `.—Ä–∏–Ω—Ñ`\n"
"üíπ **.—Å—Ç–∞–≤–∫–∞** ‚Äî __–æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –∫–∞–∫ –∏–≥—Ä–∞—Ç—å__ ‚Äî `.—Å—Ç–∞–≤–∫–∏`\n")


    await event.reply(msg)

# üí∏ –í—ã–¥–∞—á–∞ –º–æ–Ω–µ—Ç (—Ç–æ–ª—å–∫–æ –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞)
@bot.on(events.NewMessage(pattern=r"\.–¥ (\d+)"))
async def give_coins(event):
    if event.sender_id not in ADMINS:
        await event.reply("‚õî –£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —ç—Ç—É –∫–æ–º–∞–Ω–¥—É!")
        return

    if not event.is_reply:
        await event.reply("‚ö†Ô∏è –û—Ç–≤–µ—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞, –∫–æ—Ç–æ—Ä–æ–º—É —Ö–æ—á–µ—à—å –≤—ã–¥–∞—Ç—å –ª—É–¥–∫–æ–∏–Ω—ã!")
        return


    reply_msg = await event.get_reply_message()
    target_id = reply_msg.sender_id
    amount = int(event.pattern_match.group(1))

    update_balance(target_id, amount)
    await event.reply(f"‚úÖ –í—ã–¥–∞–Ω–æ **{amount}** –ª—É–¥–∫–æ–∏–Ω–æ–≤ –∏–≥—Ä–æ–∫—É {reply_msg.sender.first_name}!")

import random
import asyncio

# üé∞ –ò–≥—Ä–∞ –≤ —Ä—É–ª–µ—Ç–∫—É —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π
@bot.on(events.NewMessage(pattern=r"\.—Ä (\d+)"))
async def play_roulette(event):
    user_id = event.sender_id
    sender = await event.get_sender()
    username = getattr(sender, "username", None) or f"User{user_id}"
    user = get_user(user_id, username)

    bet = int(event.pattern_match.group(1))

    if bet < 1000:
        await event.reply("‚ö†Ô∏è –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞ ‚Äî **1000** –ª—É–¥–∫–æ–∏–Ω–æ–≤!")
        return

    if user[2] < bet:
        await event.reply("üí∏ –£ —Ç–µ–±—è –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª—É–¥–∫–æ–∏–Ω–æ–≤ –¥–ª—è —ç—Ç–æ–π —Å—Ç–∞–≤–∫–∏!")
        return

    # –ù–æ–≤—ã–µ —à–∞–Ω—Å—ã –Ω–∞ –∏—Å—Ö–æ–¥
    outcomes = [
        ("üî¥ –ü—Ä–æ–∏–≥—Ä—ã—à", 0, 60),  
        ("üü° –í–æ–∑–≤—Ä–∞—Ç —Å—Ç–∞–≤–∫–∏", 1, 10),  
        ("üü¢ x2 —Å—Ç–∞–≤–∫–∞", 2, 15),  
        ("üîµ x3 —Å—Ç–∞–≤–∫–∞", 3, 8),  
        ("üíé x5 —Å—Ç–∞–≤–∫–∞", 5, 5),  
        ("üî• x10 —Å—Ç–∞–≤–∫–∞ (–¥–∂–µ–∫–ø–æ—Ç)", 10, 2)  
    ]

    # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –∏—Å—Ö–æ–¥
    result = random.choices(outcomes, weights=[o[2] for o in outcomes])[0]
    outcome_text, multiplier, _ = result

    # –í—ã—á–∏—Å–ª—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞
    winnings = bet * multiplier
    balance_change = winnings - bet
    update_balance(user_id, balance_change)

    # –ê–Ω–∏–º–∞—Ü–∏—è –≤—Ä–∞—â–µ–Ω–∏—è —Ä—É–ª–µ—Ç–∫–∏
    animation_frames = ["üé∞ üîÑ", "üé∞ üîÑüîÑ", "üé∞ üîÑüîÑüîÑ", "üé∞ üîÑüîÑüîÑüîÑ", "üé∞ üéØ"]
    msg = await event.reply(f"üé∞ **–†—É–ª–µ—Ç–∫–∞ –∫—Ä—É—Ç–∏—Ç—Å—è...** üîÑ")

    for frame in animation_frames:
        await asyncio.sleep(0.5)
        await msg.edit(frame)

    # –ò—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    final_msg = (
        f"üé∞ **–†—É–ª–µ—Ç–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∏–ª–∞—Å—å!**\n\n"
        f"üí∞ **–°—Ç–∞–≤–∫–∞:** {bet} –ª—É–¥–∫–æ–∏–Ω–æ–≤\n"
        f"üé≤ **–†–µ–∑—É–ª—å—Ç–∞—Ç:** {outcome_text}\n"
        f"üè¶ **–¢–≤–æ–π –±–∞–ª–∞–Ω—Å:** {get_user(user_id, username)[2]} –ª—É–¥–∫–æ–∏–Ω–æ–≤\n\n"
        f"üîÑ –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞ —Å `.—Ä`!"
    )

    await msg.edit(final_msg)

# üé∞ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä—É–ª–µ—Ç–∫–µ
@bot.on(events.NewMessage(pattern=r"\.—Ä–∏–Ω—Ñ"))
async def roulette_info(event):
    msg = (
        "üé∞ **–†—É–ª–µ—Ç–∫–∞ ‚Äî –ò—Å–ø—ã—Ç–∞–π —É–¥–∞—á—É!** üé∞\n\n"
        "üí∞ **–ö–∞–∫ –∏–≥—Ä–∞—Ç—å:**\n"
        "–û—Ç–ø—Ä–∞–≤—å `.—Ä [—Å—Ç–∞–≤–∫–∞]`, –∏ —Ä—É–ª–µ—Ç–∫–∞ —Ä–µ—à–∏—Ç —Ç–≤–æ—é —Å—É–¥—å–±—É!\n\n"
        "üé≤ **–®–∞–Ω—Å—ã –Ω–∞ –≤—ã–∏–≥—Ä—ã—à:**\n"
        "üî¥ –ü—Ä–æ–∏–≥—Ä—ã—à ‚Äî **60%**\n"
        "üü° –í–æ–∑–≤—Ä–∞—Ç —Å—Ç–∞–≤–∫–∏ ‚Äî **10%**\n"
        "üü¢ x2 —Å—Ç–∞–≤–∫–∞ ‚Äî **15%**\n"
        "üîµ x3 —Å—Ç–∞–≤–∫–∞ ‚Äî **8%**\n"
        "üíé x5 —Å—Ç–∞–≤–∫–∞ ‚Äî **5%**\n"
        "üî• x10 —Å—Ç–∞–≤–∫–∞ (–¥–∂–µ–∫–ø–æ—Ç) ‚Äî **2%**\n\n"
        "‚ö†Ô∏è –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞: **1000 –ª—É–¥–∫–æ–∏–Ω–æ–≤**\n"
        "üíé –ß–µ–º –±–æ–ª—å—à–µ —Å—Ç–∞–≤–∫–∞, —Ç–µ–º –±–æ–ª—å—à–µ –≤—ã–∏–≥—Ä—ã—à!\n\n"
        "üîÑ –£–¥–∞—á–∏, –∏–≥—Ä–æ–∫! üé∞"
    )
    await event.reply(msg)

import random

# –°–ø–∏—Å–æ–∫ –≤–æ–∑–º–æ–∂–Ω—ã—Ö —Ü–≤–µ—Ç–æ–≤ –∏ –∏—Ö —à–∞–Ω—Å–æ–≤
colors = {
    "üñ§": 49,  # –ß–µ—Ä–Ω—ã–π
    "‚ù§Ô∏è": 49,  # –ö—Ä–∞—Å–Ω—ã–π
    "üíö": 2     # –ó–µ–ª–µ–Ω—ã–π
}

# –ò–≥—Ä–æ–≤–∞—è –ª–æ–≥–∏–∫–∞
user_bets = {}

# –ú–∞–ø–ø–∏–Ω–≥ —Å–æ–∫—Ä–∞—â–µ–Ω–∏–π –Ω–∞ —Ü–≤–µ—Ç–∞
color_mapping = {
    "—á": "üñ§",  # –ß–µ—Ä–Ω—ã–π
    "–∫": "‚ù§Ô∏è",  # –ö—Ä–∞—Å–Ω—ã–π
    "–∑": "üíö"   # –ó–µ–ª–µ–Ω—ã–π
}

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Å—Ç–∞–≤–æ–∫
@bot.on(events.NewMessage(pattern=r"\.—Å—Ç–∞–≤–∫–∞ (—á|–∫|–∑) (\d+)"))
async def place_bet(event):
    color_key = event.pattern_match.group(1)
    bet_amount = int(event.pattern_match.group(2))
    user_id = event.sender_id

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ –∏–≥—Ä–æ–∫–∞
    cursor.execute("SELECT balance FROM users WHERE user_id = ?", (user_id,))
    result = cursor.fetchone()
    
    if result is None:
        # –ï—Å–ª–∏ –∏–≥—Ä–æ–∫–∞ –Ω–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, —Å–æ–∑–¥–∞–µ–º –µ–≥–æ —Å –Ω–∞—á–∞–ª—å–Ω—ã–º –±–∞–ª–∞–Ω—Å–æ–º
        cursor.execute("INSERT INTO users (user_id, balance) VALUES (?, ?)", (user_id, 1000))
        conn.commit()
        balance = 1000
    else:
        balance = result[0]

    if bet_amount > balance:
        await event.reply(f"‚ùå –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª—É–¥–∫–æ–∏–Ω–æ–≤ –¥–ª—è —Å—Ç–∞–≤–∫–∏! –í–∞—à –±–∞–ª–∞–Ω—Å: {balance} –ª—É–¥–∫–æ–∏–Ω–æ–≤.")
        return

    if color_key not in color_mapping:
        await event.reply("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä —Ü–≤–µ—Ç–∞! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ .—Å—Ç–∞–≤–∫–∞ —á (—á–µ—Ä–Ω—ã–π), .—Å—Ç–∞–≤–∫–∞ –∫ (–∫—Ä–∞—Å–Ω—ã–π) –∏–ª–∏ .—Å—Ç–∞–≤–∫–∞ –∑ (–∑–µ–ª–µ–Ω—ã–π).")
        return

    color = color_mapping[color_key]
    user_bets[user_id] = {"color": color, "bet_amount": bet_amount}

    await event.reply(f"üé≤ –í—ã –≤—ã–±—Ä–∞–ª–∏ {color} –∏ –ø–æ—Å—Ç–∞–≤–∏–ª–∏ {bet_amount} –ª—É–¥–∫–æ–∏–Ω–æ–≤. –î–ª—è –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã –Ω–∞–ø–∏—à–∏—Ç–µ .–≥–æ.")

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã
@bot.on(events.NewMessage(pattern=r"\.–≥–æ"))
async def start_game(event):
    user_id = event.sender_id
    if user_id not in user_bets:
        await event.reply("‚ùå –í—ã –µ—â–µ –Ω–µ —Å–¥–µ–ª–∞–ª–∏ —Å—Ç–∞–≤–∫—É! –ù–∞–ø–∏—à–∏—Ç–µ .—Å—Ç–∞–≤–∫–∞ [—Ü–≤–µ—Ç] [—Å—Ç–∞–≤–∫–∞].")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Ü–≤–µ—Ç –∏ —Å—Ç–∞–≤–∫—É –∏–≥—Ä–æ–∫–∞
    user_bet = user_bets[user_id]
    chosen_color = user_bet["color"]
    bet_amount = user_bet["bet_amount"]
    
    # –†–∞–Ω–¥–æ–º–Ω—ã–π –≤—ã–±–æ—Ä —Ü–≤–µ—Ç–∞
    drawn_color = random.choices(list(colors.keys()), weights=colors.values(), k=1)[0]
    
    # –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –≤—ã–∏–≥—Ä—ã—à–∞
    if drawn_color == chosen_color:
        if drawn_color == "üíö":
            winnings = bet_amount * 15
            await event.reply(f"üéâ –í—ã –≤—ã–±—Ä–∞–ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ! –¶–≤–µ—Ç {drawn_color} –∏ –≤—ã –≤—ã–∏–≥—Ä–∞–ª–∏ {winnings} –ª—É–¥–∫–æ–∏–Ω–æ–≤! üî•")
        else:
            winnings = bet_amount * 2
            await event.reply(f"üéâ –í—ã –≤—ã–±—Ä–∞–ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ! –¶–≤–µ—Ç {drawn_color} –∏ –≤—ã –≤—ã–∏–≥—Ä–∞–ª–∏ {winnings} –ª—É–¥–∫–æ–∏–Ω–æ–≤! ‚ú®")
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –∏–≥—Ä–æ–∫–∞
        cursor.execute("UPDATE users SET balance = balance + ? WHERE user_id = ?", (winnings, user_id))
        conn.commit()
    else:
        await event.reply(f"üí• –£–≤—ã, –Ω–µ —É–≥–∞–¥–∞–ª–∏. –ë–æ—Ç –≤—ã–±—Ä–∞–ª {drawn_color}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞!")
        
        # –°–ø–∏—Å—ã–≤–∞–Ω–∏–µ —Å—Ç–∞–≤–∫–∏ —Å –±–∞–ª–∞–Ω—Å–∞ –∏–≥—Ä–æ–∫–∞
        cursor.execute("UPDATE users SET balance = balance - ? WHERE user_id = ?", (bet_amount, user_id))
        conn.commit()

    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞–≤–∫—É –∏–≥—Ä–æ–∫–∞
    del user_bets[user_id]

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ–±—ä—è—Å–Ω–µ–Ω–∏—è –∏–≥—Ä—ã
@bot.on(events.NewMessage(pattern=r"\.—Å—Ç–∞–≤–∫–∏"))
async def show_rules(event):
    rules = """
    üí° **–ö–∞–∫ –∏–≥—Ä–∞—Ç—å –≤ —Å—Ç–∞–≤–∫–∏ –ø–æ —Ü–≤–µ—Ç–∞–º:**
    
    1. –ù–∞–ø–∏—à–∏—Ç–µ `.—Å—Ç–∞–≤–∫–∞ [—Ü–≤–µ—Ç] [—Å—Ç–∞–≤–∫–∞]`, —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å —Ü–≤–µ—Ç –∏ –ø–æ—Å—Ç–∞–≤–∏—Ç—å –ª—É–¥–∫–æ–∏–Ω—ã.
       –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ü–≤–µ—Ç–∞:
       - .—Å—Ç–∞–≤–∫–∞ —á (—á–µ—Ä–Ω—ã–π) üñ§
       - .—Å—Ç–∞–≤–∫–∞ –∫ (–∫—Ä–∞—Å–Ω—ã–π) ‚ù§Ô∏è
       - .—Å—Ç–∞–≤–∫–∞ –∑ (–∑–µ–ª–µ–Ω—ã–π) üíö
    
    2. –ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –Ω–∞–ø–∏—à–∏—Ç–µ `.–≥–æ`, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É.
    
    üé≤ **–®–∞–Ω—Å—ã –Ω–∞ –ø–æ–±–µ–¥—É:**
    - üñ§ –ß–µ—Ä–Ω—ã–π: 49%
    - ‚ù§Ô∏è –ö—Ä–∞—Å–Ω—ã–π: 49%
    - üíö –ó–µ–ª–µ–Ω—ã–π: 2%
    
    üí∞ **–í—ã–∏–≥—Ä—ã—à–∏:**
    - –ï—Å–ª–∏ –≤—ã –≤—ã–±—Ä–∞–ª–∏ —á–µ—Ä–Ω—ã–π –∏–ª–∏ –∫—Ä–∞—Å–Ω—ã–π, —Å—Ç–∞–≤–∫–∞ —É–¥–≤–∞–∏–≤–∞–µ—Ç—Å—è.
    - –ï—Å–ª–∏ –≤—ã –≤—ã–±—Ä–∞–ª–∏ –∑–µ–ª–µ–Ω—ã–π, —Å—Ç–∞–≤–∫–∞ —É–º–Ω–æ–∂–∞–µ—Ç—Å—è –Ω–∞ 15!
    
    –£–¥–∞—á–∏ –≤ –∏–≥—Ä–µ! üçÄ
    """
    await event.reply(rules)

# üö´ –û–±–Ω—É–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞)
@bot.on(events.NewMessage(pattern=r"\.—Å–Ω—è—Ç—å"))
async def reset_balance(event):
    if event.sender_id not in ADMINS:
        await event.reply("‚õî –£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —ç—Ç—É –∫–æ–º–∞–Ω–¥—É!")
        return

    if not event.is_reply:
        await event.reply("‚ö†Ô∏è –û—Ç–≤–µ—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞ –¥–ª—è —Å–±—Ä–æ—Å–∞ –±–∞–ª–∞–Ω—Å–∞!")
        return

    reply_msg = await event.get_reply_message()
    target_id = reply_msg.sender_id

    cursor.execute("UPDATE users SET balance = 0 WHERE user_id = ?", (target_id,))
    conn.commit()
    await event.reply(f"‚ùå –ë–∞–ª–∞–Ω—Å –∏–≥—Ä–æ–∫–∞ {reply_msg.sender.first_name} –æ–±–Ω—É–ª—ë–Ω!")

# ‚úÖ –ó–∞–ø—É—Å–∫
with bot:
    bot.run_until_disconnected()
